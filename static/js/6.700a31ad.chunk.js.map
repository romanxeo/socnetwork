{"version":3,"sources":["utils/validators/validators.ts","components/Content/common/formsControls/FormsControl.tsx","components/Content/common/formsControls/FormControl.module.css","components/Content/Login/Login.module.css","components/Content/Login/Login.tsx"],"names":["requiredField","value","maxLengthCreator","maxLength","length","TextArea","input","meta","props","hasError","touched","error","className","s","formControl","Input","module","exports","maxLength50","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","placeholder","component","name","validate","type","checkBox","formSummaryError","MDTP","login","connect","state","isAuth","auth","to","loginBlock","formData","email","password","rememberMe"],"mappings":"0GAAA,oEAAO,IAAMA,EAAgB,SAACC,GAC5B,IAAMA,EACN,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACtD,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,+LCF5BE,EAAW,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAASC,EAAgB,iBAElDC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACE,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,EAAWI,IAAEF,MAAQ,IAA5D,UACE,8BACE,oDAAcL,GAAWE,MAE3B,8BACGC,GAAY,+BAAOF,EAAKI,cAMpBI,EAAQ,SAAC,GAAkC,IAAjCT,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAASC,EAAgB,iBAE/CC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACE,uBAAMC,UAAWC,IAAEC,YAAc,KAAOL,EAAWI,IAAEF,MAAQ,IAA7D,UACE,+BACE,iDAAWL,GAAWE,MAExB,+BACGC,GAAY,+BAAOF,EAAKI,e,oBC3BjCK,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,SAAW,gC,oBCA/GD,EAAOC,QAAU,CAAC,WAAa,0BAA0B,iBAAmB,kC,iCCD5E,oGAaMC,EAAchB,YAAiB,IA0C/BiB,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EAxCL,SAACZ,GACjB,OAAO,uBAAMc,SAAUd,EAAMe,aAAtB,UACL,8BACE,cAAC,IAAD,CACEC,YAAa,QACbC,UAAWV,IACXW,KAAM,QACNC,SAAU,CAAC3B,IAAekB,OAG9B,8BACE,cAAC,IAAD,CACEM,YAAa,WACbC,UAAWV,IACXW,KAAM,WACNE,KAAM,WACND,SAAU,CAAC3B,IAAekB,OAG9B,gCACE,cAAC,IAAD,CACEU,KAAM,WACNH,UAAWV,IACXW,KAAM,aACNC,SAAU,CAAC3B,IAAekB,GAC1BN,UAAWC,IAAEgB,WANjB,iBAUCrB,EAAMG,OACP,qBAAKC,UAAWC,IAAEiB,iBAAlB,SACGtB,EAAMG,QAGT,8BACE,mDA0BAoB,EAAiB,CACrBC,WAsBaC,uBA7BF,SAACC,GACZ,MAAO,CACLC,OAAQD,EAAME,KAAKD,UA2BMJ,EAAdE,EAlBD,SAACzB,GAKb,OAAIA,EAAM2B,OACD,cAAC,IAAD,CAAUE,GAAI,aAKrB,sBAAKzB,UAAWC,IAAEyB,WAAlB,UACE,uCACA,cAACnB,EAAD,CAAgBG,SAZH,SAACiB,GAChB/B,EAAMwB,MAAMO,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.700a31ad.chunk.js","sourcesContent":["export const requiredField = (value: any) => {\r\n  if (!!value) return undefined\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n  return undefined\r\n}\r\n","import React from 'react'\r\nimport s from './FormControl.module.css'\r\n\r\n\r\nexport const TextArea = ({input, meta, ...props}: any) => {\r\n\r\n  const hasError = meta.touched && meta.error\r\n  return (\r\n    <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n      <div>\r\n        <textarea {...input} {...props}/>\r\n      </div>\r\n      <div>\r\n        {hasError && <span>{meta.error}</span>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n\r\n  const hasError = meta.touched && meta.error\r\n  return (\r\n    <span className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n      <span>\r\n        <input {...input} {...props}/>\r\n      </span>\r\n      <span>\r\n        {hasError && <span>{meta.error}</span>}\r\n      </span>\r\n    </span>\r\n  )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__3e3nq\",\"error\":\"FormControl_error__2SLj3\",\"checkBox\":\"FormControl_checkBox__2VBSA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"Login_loginBlock__3lQ7T\",\"formSummaryError\":\"Login_formSummaryError__1FxIP\"};","import React from 'react';\r\nimport s from './Login.module.css';\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {Input} from \"../common/formsControls/FormsControl\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField\r\n} from \"../../../utils/validators/validators\";\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../../redux/authReducer';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst LoginForm = (props: any) => {\r\n  return <form onSubmit={props.handleSubmit}>\r\n    <div>\r\n      <Field\r\n        placeholder={'email'}\r\n        component={Input}\r\n        name={'email'}\r\n        validate={[requiredField, maxLength50]}\r\n      />\r\n    </div>\r\n    <div>\r\n      <Field\r\n        placeholder={'password'}\r\n        component={Input}\r\n        name={'password'}\r\n        type={'password'}\r\n        validate={[requiredField, maxLength50]}\r\n      />\r\n    </div>\r\n    <div>\r\n      <Field\r\n        type={'checkbox'}\r\n        component={Input}\r\n        name={'rememberMe'}\r\n        validate={[requiredField, maxLength50]}\r\n        className={s.checkBox}\r\n      />\r\n      Remember me\r\n    </div>\r\n    {props.error &&\r\n    <div className={s.formSummaryError}>\r\n      {props.error}\r\n    </div>\r\n    }\r\n    <div>\r\n      <button>Login</button>\r\n    </div>\r\n  </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: 'login'\r\n})(LoginForm)\r\n\r\n\r\ntype MSTPType = {\r\n  isAuth: boolean\r\n}\r\n\r\ntype MDTPType = {\r\n  login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype loginType = MSTPType & MDTPType\r\n\r\nconst MSTP = (state: AppStateType): MSTPType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n}\r\n\r\nconst MDTP: MDTPType = {\r\n  login\r\n}\r\n\r\n\r\nconst Login = (props: loginType) => {\r\n  const onSubmit = (formData: any) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to={'/profile'}/>\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={s.loginBlock}>\r\n      <h1>LOGIN</h1>\r\n      <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default connect(MSTP, MDTP)(Login)"],"sourceRoot":""}